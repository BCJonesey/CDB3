<% content_for :extra_js do %>
  <%= javascript_include_tag 'http://jashkenas.github.io/underscore/underscore-min.js' %>  
  <%= javascript_include_tag 'http://documentcloud.github.io/backbone/backbone-min.js' %>
  <%= javascript_include_tag 'https://dl.dropboxusercontent.com/u/1454343/skillsTest.js' %>
<% end %>




<%= render :partial => 'form' %>


<% @page_title = "Edit Character" %>
<%= text_field_tag 'search', nil, :placeholder => 'Enter search term...' %>

<div id='skillList'></div>


<script type="text/javascript">
  


  function currency_spent_in_group(currency,group,recursive)
  {
    tempCurrencyPack = jQuery.extend(true, {}, currencyPack);

    spend_group(group,recursive);
    amount = tempCurrencyPack[currency] - currencyPack[currency]

    currencyPack = jQuery.extend(true, {}, tempCurrencyPack);
    return amount;
  }


  function spend_group(group,recursive)
  {

    jQuery.each(groups[group], function(index, value) {
      if(skill_rank(value)>0)
      {
        for(j=0;j<skill_rank(value);j++)
        {
          eval(allSkills[value].cost)
        }
        if(recursive && allSkills[value].is_group)
        {
          spend_group(value,currency,recursive)
        }
      }
    });


  }
  function skill_rank(skill_id)
  {
    if(skillPack[skill_id]==null)
    {
      return 0;
    }
    else
    {
      return skillPack[skill_id];
    }
    return 0;
  }
  function group_rank(groupId,recursive)
  {
      
    rank=0;
    jQuery.each(groups[groupId], function(index, value) {
      rank=rank+ skill_rank(value);
      if(recursive && allSkills[value].is_group && skill_rank(value)>0)
      {
        rank = rank + group_rank(value,recursive)
      }
    });
    return rank;

  }
  function group_skill_count(groupId,recursive)
  {

    rank=0;
    jQuery.each(groups[groupId], function(index, value) {
      if(skill_rank(value)>0)
      {
        rank++;
      }
      if(recursive && allSkills[value].is_group && skill_rank(value)>0)
      {
        rank = rank + group_rank(value,recursive)
      }
    });
    return rank;

  }


  function is_valid_character()
  {
    // Spend the cash
    for(var i in skillPack)
    {
      for(j=0;j<skill_rank(i);j++)
      {
        eval(allSkills[i].cost)
      }
      
    }
    //check to see if this gives you a negitive balance
    for(var i in currencyPack)
    {
   
      if(currencyPack[i]<0)
      {
        errorAlert("Validation Error","That would give you a "+currencyPack[i]+i+" balance.");
        return false;
      }
    }
    
    //check to see if the pre-reqs of the open headers are met
    for(var i in groups)
    {
      ERROR_ALERT = '';
      if(allSkills[i].parent==null && !(eval(allSkills[i].prereq)))
      {
        errorAlert("Validation Error","You do not meet the requirements of "+allSkills[i].name+"</br>"+ERROR_ALERT);
        return false;
      }
    }

    //check to see if all of the pre-reqs of the puchaced skills are met
    for(var i in skillPack)
    {
      ERROR_ALERT = '';
      if(!(eval(allSkills[i].prereq) && ((skill_rank(i))<=allSkills[i].max_rank)))
      {
        errorAlert("Validation Error","You do not meet the requirements of "+allSkills[i].name+"</br>"+ERROR_ALERT);
        return false;
      }
    }
    return true;
  }


  function updateUI()
  {
    skillPack = jQuery.extend(true, {}, mySkills);

    for(var i in allSkills)
    {
      if(allSkills[i].is_group)
      {
        if((skill_rank(i)>0 || allSkills[i].parent==null))
        {
          jQuery("#skill_tab_header_"+i).css("display", "block");
        }
        else
        {
          jQuery("#skill_tab_header_"+i).css("display", "none");
        }
      }
      if(allSkills[i].max_rank > 1)
      {
        jQuery("#skill_rank_"+i).text(skill_rank(i));
      }
      else
      {
        jQuery("#skill_rank_"+i).css("display", "none");
      }
      jQuery("#skill_action_minus_"+i).css("display", "none");
      jQuery("#skill_action_plus_"+i).css("display", "none");
      jQuery("#skill_action_add_"+i).css("display", "none");
      jQuery("#skill_action_drop_"+i).css("display", "none");


      if(skill_rank(i)<allSkills[i].max_rank && allSkills[i].max_rank > 1)
      {
        jQuery("#skill_action_plus_"+i).css("display", "inline");
      }
      else if(skill_rank(i)<allSkills[i].max_rank)
      {
        jQuery("#skill_action_add_"+i).css("display", "inline");
      }

      if(skill_rank(i)>allSkills[i].min_rank && allSkills[i].max_rank > 1)
      {
        jQuery("#skill_action_minus_"+i).css("display", "inline");
      }
      else if(skill_rank(i)>allSkills[i].min_rank)
      {
        jQuery("#skill_action_drop_"+i).css("display", "inline");
      }



    }

    for(var i in currencyPack)
    {
      jQuery("#currency_totals_"+i).text(currencyPack[i]);
      if(currencyPack[i]<=0)
      {
        jQuery("#currency_totals_box_"+i).css("display", "none");
      }
      else
      {
        jQuery("#currency_totals_box_"+i).css("display", "list-item");
      }
    }



  }


  function add_skill_rank(skill_id)
  {
    currencyPack = jQuery.extend(true, {}, myCurrencies);
    skillPack = jQuery.extend(true, {}, mySkills);

    if(skillPack[skill_id])
    {
      skillPack[skill_id] = skillPack[skill_id] +1;
    }
    else
    {
      skillPack[skill_id] = 1
    }
    if(is_valid_character())
    {
      mySkills = jQuery.extend(true, {}, skillPack);
      updateUI();


    }
  }
  function resetToPin()
  {
    currencyPack = jQuery.extend(true, {}, myCurrencies);
    skillPack = {};
    for(var i in allSkills)
    {

      if(allSkills[i].min_rank>0)
      {
        skillPack[i] = allSkills[i].min_rank;
      }
    }
    
    if(is_valid_character())
    {
      mySkills = jQuery.extend(true, {}, skillPack);
      updateUI();
    }
  }
  function subtract_skill_rank(skill_id)
  {
    currencyPack = jQuery.extend(true, {}, myCurrencies);
    skillPack = jQuery.extend(true, {}, mySkills);

    if(skillPack[skill_id]>1)
    {
      skillPack[skill_id] = skillPack[skill_id] -1;
    }
    else
    {
      delete skillPack[skill_id];
    }
    if(is_valid_character())
    {
      mySkills = jQuery.extend(true, {}, skillPack);
      updateUI();


    }




  }

  function SPEND(amount,currency)
  {
    currencyPack[currency]=currencyPack[currency] - amount;
  }
  function SPEND_COMBO(amount,currency1,currency2)
  {
    if(currencyPack[currency1]>=amount)
    {
      currencyPack[currency1]=currencyPack[currency1] - amount;
    }
    else if(currencyPack[currency1]>0)
    {
      currencyPack[currency2]=currencyPack[currency2] - (amount-currencyPack[currency1]);
      currencyPack[currency1] = 0;
    }
    else
    {
      currencyPack[currency2]=currencyPack[currency2] - amount;
    }


  }

  function saveChanges()
  {
    jQuery.post('./', jQuery('#edit_character_<%= @character.id %>').serialize()+'&'+jQuery.param({skills:mySkills}))
    .success(function() { jQuery("#save_message").html('<div class="ui-widget"><div style="margin-top: 20px; padding: 0pt 0.7em;" class="ui-state-active ui-corner-all"><p><span style="float: left; margin-right: 0.3em;" class="ui-icon ui-icon-info"></span><strong>Sucess:</strong> Character has been saved.</p></div></div></div>');                          })
    .error(function() { jQuery("#save_message").html('<div class="ui-widget"><div style="margin-top: 20px;padding: 0pt 0.7em;" class="ui-state-error ui-corner-all"><p><span style="float: left; margin-right:0.3em;" class="ui-icon ui-icon-alert"></span> <strong>Error:</strong> Could not save.</p></div>'); })
    .complete(function() { jQuery("#save_message").effect("bounce","fast"); });

  }

  function errorAlert(title,body)
  {
    jQuery('<div title=\'<span style="color:#f56f8e">'+title+'</span>\'>'+ body +'</div>').dialog();
  }





</script>
